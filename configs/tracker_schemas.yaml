# PixEagle Tracker Schema Configuration
# This file defines all available tracker data types and their requirements
# Allows easy addition of new tracker schemas without code changes
#
# Note on coordinate ranges:
# - Normalized coordinates can exceed [0.0, 1.0] when objects are partially off-screen
# - Range [-2.0, 2.0] allows for complete off-screen tracking while preventing extreme outliers

tracker_data_types:
  POSITION_2D:
    name: "2D Position Tracking"
    description: "Standard 2D normalized position tracking"
    category: "position"
    required_fields:
      - position_2d
    optional_fields:
      - confidence
      - bbox
      - normalized_bbox
      - velocity
    validation:
      position_2d:
        type: "tuple"
        length: 2
        element_type: "float"
        range: [-2.0, 2.0]  # Allow off-screen tracking
  
  POSITION_3D:
    name: "3D Position with Depth"
    description: "3D position tracking with depth information (includes 2D projection)"
    category: "position"
    required_fields:
      - position_3d
      - position_2d  # 2D projection is mandatory for compatibility
    optional_fields:
      - confidence
      - bbox
      - normalized_bbox
      - velocity
    validation:
      position_3d:
        type: "tuple"
        length: 3
        element_type: "float"
        range: [-2.0, 2.0]  # x,y normalized, z can be > 1
      position_2d:
        type: "tuple"
        length: 2
        element_type: "float"
        range: [-2.0, 2.0]  # Must match x,y components of position_3d
        
  ANGULAR:
    name: "Angular Bearing/Elevation"
    description: "Bearing and elevation angles in degrees"
    category: "angular"
    required_fields:
      - angular
    optional_fields:
      - confidence
      - velocity
    validation:
      angular:
        type: "tuple"
        length: 2
        element_type: "float"
        range: [-180.0, 180.0]

  GIMBAL_ANGLES:
    name: "Gimbal Angle Tracking"
    description: "Real-time gimbal yaw, pitch, roll angles from external gimbal system"
    category: "angular"
    always_reporting: true  # Always provides data when available, no manual start needed
    is_gimbal_tracker: true  # Special gimbal tracker identifier for UI
    required_fields:
      - angular
    optional_fields:
      - position_2d
      - confidence
      - gimbal_metadata
    validation:
      angular:
        type: "tuple"
        length: 3  # yaw, pitch, roll
        element_type: "float"
        range: [-180.0, 180.0]
        description: "Gimbal angles (yaw, pitch, roll) in degrees"
      position_2d:
        type: "tuple"
        length: 2
        element_type: "float"
        range: [-2.0, 2.0]
        description: "Projected target position from gimbal angles"
      gimbal_metadata:
        type: "dict"
        optional_keys:
          - coordinate_system
          - connection_status
          - target_vector_body
          - aircraft_attitude
          - mount_configuration
    # Mount configuration support for coordinate transformations
    mount_configurations:
      HORIZONTAL:
        name: "Horizontal Mount"
        description: "Gimbal mounted horizontally, 1:1 mapping with aircraft body frame"
        coordinate_mapping:
          yaw: "yaw"      # Direct mapping to aircraft yaw
          pitch: "pitch"  # Direct mapping to aircraft pitch
          roll: "roll"    # Direct mapping to aircraft roll
        startup_angles:
          yaw: 0.0       # Forward facing at startup
          pitch: 0.0     # Level at startup
          roll: 0.0      # No roll at startup
        transformation_type: "DIRECT"
        notes: "Direct 1:1 mapping to aircraft body frame coordinates"
      VERTICAL:
        name: "Vertical Mount (90Â° Rotated)"
        description: "Gimbal mounted vertically, requires 90Â° rotation transformation"
        coordinate_mapping:
          yaw: "roll"     # Gimbal yaw -> aircraft roll (azimuth)
          pitch: "pitch-90"  # Gimbal pitch-90Â° -> aircraft pitch (elevation)
          roll: "yaw"     # Gimbal roll -> aircraft yaw (typically unused in active tracking)
        startup_angles:
          yaw: 0.0       # Points forward when rolled to 0Â°
          pitch: 90.0    # Points down when pitched to 90Â°
          roll: 0.0      # No additional rotation
        transformation_type: "ROTATIONAL_90"
        notes: "Requires 90Â° coordinate rotation: roll->azimuth, pitch-90Â°->elevation"
    # Default mount configuration metadata
    default_mount: "VERTICAL"  # Default to vertical for easier testing
    coordinate_systems:
      source: "GIMBAL_BODY"    # Gimbal's local body frame
      intermediate: "AIRCRAFT_BODY"  # Aircraft body frame (FRD)
      target: "NED"            # North-East-Down world frame
        
  BBOX_CONFIDENCE:
    name: "Bounding Box with Confidence"
    description: "Traditional bounding box tracking with confidence"
    category: "bbox"
    required_fields:
      - bbox_or_normalized_bbox  # Special requirement - at least one must exist
    optional_fields:
      - confidence
      - position_2d
      - velocity
    validation:
      bbox:
        type: "tuple"
        length: 4
        element_type: "int"
        min_value: 0
      normalized_bbox:
        type: "tuple"
        length: 4
        element_type: "float"
        range: [-2.0, 2.0]  # Allow objects partially or completely off-screen
        
  VELOCITY_AWARE:
    name: "Position with Velocity Estimation"
    description: "Position tracking with velocity estimates"
    category: "motion"
    required_fields:
      - position_2d
      - velocity
    optional_fields:
      - confidence
      - acceleration
      - bbox
      - normalized_bbox
    validation:
      position_2d:
        type: "tuple"
        length: 2
        element_type: "float"
        range: [-2.0, 2.0]  # Allow off-screen tracking
      velocity:
        type: "tuple"
        length: 2
        element_type: "float"
        
  EXTERNAL:
    name: "External Data Source"
    description: "Data from external sources (radar, GPS, etc.)"
    category: "external"
    required_fields:
      - raw_data  # Must contain source-specific data
    optional_fields:
      - position_2d
      - position_3d
      - angular
      - confidence
      - metadata
    validation:
      raw_data:
        type: "dict"
        required_keys:
          - source_type
          - source_data
          
  MULTI_TARGET:
    name: "Multiple Target Tracking"
    description: "Tracking multiple targets simultaneously"
    category: "multi"
    required_fields:
      - targets
    optional_fields:
      - target_id  # ID of selected/primary target
      - position_2d  # Primary target position
      - confidence
      - bbox
      - normalized_bbox
    validation:
      targets:
        type: "list"
        min_length: 1
        element_schema:
          type: "dict"
          required_keys:
            - target_id
            - confidence
          optional_keys:
            - class_id
            - class_name
            - bbox
            - center
            - is_selected

# Tracker type configurations
tracker_types:
  CSRTTracker:
    name: "CSRT Tracker"
    description: "Channel and Spatial Reliability Tracker from OpenCV"
    supported_schemas:
      - POSITION_2D
      - BBOX_CONFIDENCE
      - VELOCITY_AWARE  # When estimator is enabled
    capabilities:
      - rotation_invariant
      - scale_invariant
      - occlusion_handling
    performance:
      accuracy: "high"
      speed: "medium"
    # UI Configuration for dashboard tracker selector
    ui_metadata:
      display_name: "CSRT"
      short_description: "Best for rotation & occlusions"
      icon: "ðŸŽ¯"
      factory_key: "CSRT"  # Key used in tracker_factory.py create_tracker()
      exclude_from_ui: false  # Show in UI selector
      performance_category: "medium_speed_high_accuracy"
      suitable_for:
        - "Rotation-invariant tracking"
        - "Perspective changes"
        - "Drone circling targets"
        - "Occlusion handling"
      recommended_scenarios:
        - "Aerial tracking of ground vehicles"
        - "Stable, high-accuracy tracking"
        - "Complex camera movements"

  KCFKalmanTracker:
    name: "KCF + Kalman Filter Tracker"
    description: "Production-ready correlation filter with internal Kalman state estimation (30-50 FPS CPU)"
    supported_schemas:
      - BBOX_CONFIDENCE
      - POSITION_2D
      - VELOCITY_AWARE  # Via internal Kalman filter
    capabilities:
      - fast_correlation_filter
      - internal_kalman_filter
      - occlusion_handling
      - real_time_cpu
      - velocity_estimation
      - bbox_stability_confidence
    performance:
      accuracy: "high"
      speed: "very_fast"
      latency: "minimal"
      cpu_usage: "low"
      recommended_for: "embedded_systems"
    # UI Configuration for dashboard tracker selector
    ui_metadata:
      display_name: "KCF + Kalman"
      short_description: "Fast tracking with state estimation"
      icon: "âš¡"
      factory_key: "KCF"  # Key used in tracker_factory.py create_tracker()
      exclude_from_ui: false  # Show in UI selector
      performance_category: "very_fast_high_accuracy"
      suitable_for:
        - "High-speed tracking (30-50 FPS)"
        - "Embedded systems (Raspberry Pi, Jetson)"
        - "Real-time CPU tracking"
        - "Fast-moving targets"
      recommended_scenarios:
        - "High-speed race car tracking"
        - "Drone-to-drone tracking"
        - "CPU-limited systems"
      
  SmartTracker:
    name: "YOLO-based Smart Tracker"
    description: "YOLO object detection with tracking"
    supported_schemas:
      - MULTI_TARGET
      - POSITION_2D  # For selected target
      - BBOX_CONFIDENCE
    capabilities:
      - multi_target
      - object_classification
      - real_time_detection
    performance:
      accuracy: "very_high"
      speed: "fast"
    # UI Configuration for dashboard tracker selector
    ui_metadata:
      display_name: "Smart Tracker (YOLO)"
      short_description: "AI-powered multi-target tracking"
      icon: "ðŸ¤–"
      factory_key: null  # Not created via factory - always-on toggle
      exclude_from_ui: true  # Excluded - controlled via Smart Mode toggle
      performance_category: "ai_powered"
      note: "Controlled via Smart Mode toggle button, not tracker selector"

  GimbalTracker:
    name: "Gimbal Angle Tracker"
    description: "Real-time gimbal angle tracking via UDP protocol"
    supported_schemas:
      - GIMBAL_ANGLES
      - ANGULAR  # Backward compatibility
      - POSITION_2D  # Derived from angle conversion
    capabilities:
      - external_data_source
      - real_time_updates
      - coordinate_transformation
      - suppressed_image_processing
    performance:
      accuracy: "very_high"  # Direct gimbal data
      speed: "very_fast"     # No image processing
      latency: "minimal"     # UDP direct connection
    # UI Configuration for dashboard tracker selector
    ui_metadata:
      display_name: "Gimbal Tracker"
      short_description: "External gimbal angle tracker"
      icon: "ðŸ“¡"
      factory_key: "Gimbal"  # Key used in tracker_factory.py create_tracker()
      exclude_from_ui: false  # Show in UI selector for gimbal users
      performance_category: "external_data"
      suitable_for:
        - "External gimbal system integration"
        - "Real-time UDP angle data"
        - "No image processing overhead"
        - "High-precision gimbal control"
      recommended_scenarios:
        - "Integration with external gimbal hardware"
        - "Camera gimbal angle-based tracking"
        - "Systems with dedicated gimbal control"

  ParticleFilterTracker:
    name: "Particle Filter Tracker"
    description: "Probabilistic particle filter tracking"
    supported_schemas:
      - POSITION_2D
      - VELOCITY_AWARE
      - BBOX_CONFIDENCE
    capabilities:
      - uncertainty_estimation
      - non_linear_motion
      - multiple_hypotheses
    performance:
      accuracy: "high"
      speed: "slow"
    # UI Configuration for dashboard tracker selector
    ui_metadata:
      display_name: "Particle Filter"
      short_description: "Probabilistic multi-hypothesis tracking"
      icon: "ðŸ”¬"
      factory_key: "ParticleFilter"  # Note: Need to add to factory if not exists
      exclude_from_ui: false  # Show in UI selector
      performance_category: "slow_very_robust"
      suitable_for:
        - "Non-linear motion patterns"
        - "Uncertainty estimation"
        - "Complex occlusion scenarios"
        - "Multiple hypothesis tracking"
      recommended_scenarios:
        - "Research and experimental tracking"
        - "Non-linear target motion"
        - "Scenarios requiring uncertainty quantification"

  DlibTracker:
    name: "dlib Correlation Tracker"
    description: "Fast correlation filter tracker with PSR confidence scoring (Danelljan et al. 2014 DSST)"
    supported_schemas:
      - POSITION_2D
      - BBOX_CONFIDENCE
      - VELOCITY_AWARE  # When estimator is enabled
    capabilities:
      - fast_correlation_filter
      - psr_confidence_scoring
      - scale_adaptation
      - appearance_learning
      - occlusion_handling
      - performance_modes  # fast, balanced, robust
    performance:
      accuracy: "high"
      speed: "very_fast"  # 25-50 FPS depending on mode
      latency: "minimal"
      cpu_usage: "low"
      recommended_for: "aerial_drone_tracking_fast_scenarios"
    notes:
      - "Based on Danelljan et al. 2014 Discriminative Scale Space Tracking (DSST)"
      - "Uses PSR (Peak-to-Sidelobe Ratio) for confidence scoring"
      - "Three performance modes: fast (25-30 FPS), balanced (18-25 FPS), robust (12-18 FPS)"
      - "Excellent for aerial tracking of drones and ground objects"
      - "Limited internal parameter tuning, robustness added via PixEagle validation layer"
    # UI Configuration for dashboard tracker selector
    ui_metadata:
      display_name: "dlib Correlation"
      short_description: "Ultra-fast PSR-based tracker"
      icon: "ðŸš€"
      factory_key: "dlib"  # Key used in tracker_factory.py create_tracker()
      exclude_from_ui: false  # Show in UI selector
      performance_category: "ultra_fast"
      suitable_for:
        - "Ultra-fast tracking (25-50 FPS)"
        - "Speed-critical applications"
        - "Low CPU overhead"
        - "Fast-moving aerial targets"
      recommended_scenarios:
        - "Drone-to-drone high-speed tracking"
        - "Resource-constrained systems"
        - "Real-time performance requirements"

# Schema compatibility matrix
compatibility:
  followers:
    ChaseFollower:
      required_schemas:
        - POSITION_2D
      compatible_schemas:
        - POSITION_3D  # Works because 3D includes 2D projection
        - BBOX_CONFIDENCE
        - VELOCITY_AWARE
        - MULTI_TARGET  # SmartTracker provides position_2d for selected target
    BodyVelocityChaseFollower:
      required_schemas:
        - POSITION_2D
      compatible_schemas:
        - POSITION_3D  # Works because 3D includes 2D projection
        - MULTI_TARGET  # SmartTracker provides position_2d for selected target
      preferred_schemas:
        - VELOCITY_AWARE
      optional_schemas:
        - BBOX_CONFIDENCE
    ConstantPositionFollower:
      required_schemas:
        - POSITION_2D
      compatible_schemas:
        - POSITION_3D  # Works because 3D includes 2D projection
        - VELOCITY_AWARE  # Works because VELOCITY_AWARE includes position_2d
        - MULTI_TARGET  # SmartTracker provides position_2d for selected target
      optional_schemas:
        - ANGULAR
        - BBOX_CONFIDENCE
    ConstantDistanceFollower:
      required_schemas:
        - POSITION_2D
      compatible_schemas:
        - POSITION_3D  # Works because 3D includes 2D projection (and adds depth info)
        - VELOCITY_AWARE  # Works because VELOCITY_AWARE includes position_2d
        - MULTI_TARGET  # SmartTracker provides position_2d for selected target
      optional_schemas:
        - BBOX_CONFIDENCE
        - ANGULAR
      preferred_schemas:
        - POSITION_3D  # Actually prefers 3D for distance calculations
    GroundTargetFollower:
      required_schemas:
        - POSITION_2D
      compatible_schemas:
        - POSITION_3D  # Works because 3D includes 2D projection
        - VELOCITY_AWARE  # Works because VELOCITY_AWARE includes position_2d
        - MULTI_TARGET  # SmartTracker provides position_2d for selected target
      preferred_schemas:
        - ANGULAR
        - POSITION_3D  # 3D helps with ground projection
      optional_schemas:
        - EXTERNAL
    GimbalFollower:
      required_schemas:
        - GIMBAL_ANGLES
      compatible_schemas:
        - ANGULAR  # Can work with standard angular data
      preferred_schemas:
        - GIMBAL_ANGLES  # Designed specifically for gimbal data
      optional_schemas:
        - POSITION_2D  # Additional positioning data

# Future extensibility guidelines
extensibility:
  adding_new_schema:
    steps:
      - "Define schema in this YAML file"
      - "Add validation rules"
      - "Update tracker implementations as needed"
      - "Test compatibility with existing followers"
  adding_new_tracker:
    steps:
      - "Implement BaseTracker interface"
      - "Define supported schemas in this file"
      - "Add to tracker factory"
      - "Test with all compatible followers"
  schema_versioning:
    current_version: "1.0"
    backward_compatibility: true
    migration_support: true